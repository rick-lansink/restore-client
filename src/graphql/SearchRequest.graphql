fragment requestDetail on SearchRequest {
    id
    name
    created_at
    updated_at
    dueDate
    extraRequirements
    extraWishes
    deliveryFrom
    deliveryUntil
    priority
    unitOfMeasurement
    isPublic
    RootComponents {
        id
        valueHash
        name
        type
        DimensionSets {
            id
            dimensionHash
            dimensionOne dimensionTwo dimensionThree
            usedBy
            volume
            surfaceArea
        }
        Properties {
            id propertySet propertyKey propertyValue fromModel predefinedPropertyId
            PredefinedProperty {
                valueType valueUnit propertyDescription valuePrefix valueSuffix
            }
        }
    }
    RootMaterials {
        id
        objectId
        volume
        surfaceArea
        name
        usedBy
        Properties {
            id propertySet propertyKey propertyValue fromModel predefinedPropertyId
            PredefinedProperty {
                valueType valueUnit propertyDescription valuePrefix valueSuffix
            }
        }
    }
}

query getProjectSearchRequests($projectId: String!) {
    SearchRequest(where: {
        Project: {
            projectId: {
                _eq: $projectId
            }
        }
    }) {
        id
        name
        created_at
        updated_at
        dueDate
        extraRequirements
        extraWishes
        deliveryFrom
        deliveryUntil
        priority
        unitOfMeasurement
        isPublic
        RootComponents {
            name
        }
        RootMaterials {
            name
        }
    }
}

query getSearchRequestsCompareData($projectId: uuid!) {
    SearchRequest(where: {
        projectId: {_eq: $projectId}
    }) {
        ...requestDetail
    }
}

query getSearchRequestById($requestId: uuid!) {
    SearchRequest(where: {
        id: {_eq: $requestId}
    }) {
        ...requestDetail
    }
}

mutation newSearchRequest($internalProjectId: uuid!) {
    insert_SearchRequest(objects: {
        projectId: $internalProjectId
    }) {
        affected_rows
        returning {
            id
        }
    }
}

mutation updateSearchRequest($requestId: uuid!, $object: SearchRequest_set_input) {
    update_SearchRequest(where: {
        id: {_eq: $requestId}
    }, _set: $object) {
        affected_rows
    }
}

mutation updateSearchRequestStatus($status: String!, $requestId: uuid!) {
    update_SearchRequest(where: {
        id: {_eq: $requestId}
    }, _set: {
        priority: $status
    }) {
        affected_rows
    }
}

mutation setRootMaterial($object: [RootMaterial_insert_input!]!, $requestId: uuid!, $objectId: oid!) {
    insert_RootMaterial(objects: $object, on_conflict: {
        constraint: RootMaterial_searchRequestId_objectId_key,
        update_columns: [name]
    }) {
        affected_rows
    }
    delete_RootMaterial(where: {
        searchRequestId: {_eq: $requestId},
        objectId: {_neq: $objectId}
    }) {
        affected_rows
    }
    delete_RootComponent(where: {
        searchRequestId: {_eq: $requestId}
    }) {
        affected_rows
    }
}

mutation setRootComponent($object: [RootComponent_insert_input!]!, $rootHash: String!, $requestId: uuid!, $dimensionSets: [String!]!) {
    insert_RootComponent(objects: $object, on_conflict: {
        constraint: RootComponent_searchRequestId_valueHash_key,
        update_columns: [name]
    }) {
        affected_rows
    }
    delete_RootComponent(where: {
        searchRequestId: {_eq: $requestId},
        valueHash: {_neq: $rootHash}
    }) {
        affected_rows
    }
    delete_RootMaterial(where: {
        searchRequestId: {_eq: $requestId}
    }) {
        affected_rows
    }
    delete_DimensionSet(where: {
        RootComponent: {
            searchRequestId: {_eq: $requestId},
            valueHash: {_eq: $rootHash}
        },
        dimensionHash: {_nin: $dimensionSets}
    }) {
        affected_rows
    }
}